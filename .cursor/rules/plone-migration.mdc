---
globs: *.py,*.pt,*.xml,*.json
description: Reglas espec√≠ficas para migraci√≥n de Plone 4 a Plone 6
---

# üöÄ Reglas de Migraci√≥n Plone 4 ‚Üí 6

## üì¶ Paquetes de Migraci√≥n

### collective.exportimport
- Usar para exportar contenido de Plone 4
- Configurar en `buildout.cfg` con versi√≥n compatible
- Exportar con `bin/instance export_content`

### contentimport (custom)
- Personalizar en [src/contentimport/contentimport/import_content.py](mdc:src/contentimport/contentimport/import_content.py)
- Hook `global_obj_hook_before_deserializing` para normalizar datos
- Manejar errores de validaci√≥n espec√≠ficos de Plone 6

## üîß Normalizaci√≥n de Datos

### Campos JSON
```python
# Convertir dicts a strings JSON
if isinstance(val, dict):
    item['campo'] = json.dumps(val)
elif val in (None, {}, ''):
    item['campo'] = '{}'
```

### Campos DateTime
```python
# Manejar fechas de Plone 4
if 'horaInici' in item:
    if isinstance(item['horaInici'], str):
        item['horaInici'] = DateTime(item['horaInici'])
```

### Campos requeridos
```python
# Evitar None en campos requeridos
if item.get('campo') is None:
    item['campo'] = ''
```

## üéØ Errores Comunes

### ValidationError
- `Constraint not satisfied` ‚Üí revisar vocabularios
- `Object is of wrong type` ‚Üí normalizar tipos de datos
- `Required field` ‚Üí asignar valores por defecto

### TypeError
- `Object of type DateTime is not JSON serializable` ‚Üí convertir a string
- `unhashable type: 'RichTextValue'` ‚Üí acceder a `.output`

### KeyError
- `KeyError: 1` en diccionarios ‚Üí verificar tipos de claves (str vs int)

## üß© Genweb.organs Espec√≠fico

### infoQuorums
```python
# Mantener claves como enteros para compatibilidad
val_int_keys = {int(k): v for k, v in val.items()}
item['infoQuorums'] = repr(val_int_keys)
```

### estatsLlista
- Campo `schema.Choice` con vocabulario restringido
- Funci√≥n `llistaEstats` debe parsear HTML correctamente
- Manejar sufijos de color en valores legacy

### defaultFactory
- Evitar recursi√≥n leyendo del contexto padre
- Retornar valores por defecto seguros
- Manejar casos donde el contexto no es adaptable

## üåê Internacionalizaci√≥n

### Mensajes en templates
```html
<!-- Usar i18n:translate para mensajes migrados -->
<td i18n:translate="">${data/message}</td>
```

### Traducciones
- Verificar que mensajes migrados se traduzcan
- Usar `context.translate()` en Python cuando sea necesario

## üîç Debugging

### ipdb
```python
import ipdb; ipdb.set_trace()
```

### Logs
```python
import logging
logger = logging.getLogger(__name__)
logger.info(f"Debug: {variable}")
```

## üìã Checklist de Migraci√≥n

- [ ] Exportar contenido de Plone 4
- [ ] Normalizar datos en `global_obj_hook_before_deserializing`
- [ ] Verificar vocabularios y campos Choice
- [ ] Probar creaci√≥n manual vs migrada
- [ ] Verificar traducciones
- [ ] Revisar defaultFactory por recursi√≥n
- [ ] Comprobar tipos de datos (DateTime, RichTextValue)
- [ ] Validar campos requeridos