---
globs: *.py
alwaysApply: false
---
# Cursor Rules: Migraci√≥n Python 2.7 ‚Üí Python 3.11

## 1Ô∏è‚É£ Sintaxis b√°sica
- Reemplaza `print` como instrucci√≥n por `print()` como funci√≥n.
- Sustituye `xrange()` por `range()`.
- Sustituye `dict.iteritems()` / `iteritems()` ‚Üí `items()`; `iterkeys()` ‚Üí `keys()`; `itervalues()` ‚Üí `values()`.
- Cambia `basestring` por `str`.
- Sustituye `unicode` por `str`; usa `bytes` cuando necesites datos binarios.
- Quita `long`; en Python 3 todo es `int`.
- Usa `from __future__ import annotations` si quieres tipado diferido (opcional, recomendado en 3.11).

## 2Ô∏è‚É£ Manejo de cadenas y bytes
- Revisa todo lo que antes mezclaba `str` y `unicode`; en Python 3 `str` siempre es Unicode.
- Usa `b"..."` para literales de bytes.
- Cuando leas/escribas archivos, abre con `encoding="utf-8"` y modo binario/texto seg√∫n corresponda.
- Sustituye `StringIO` de `StringIO` por:
  - `io.StringIO` para texto.
  - `io.BytesIO` para binarios.

## 3Ô∏è‚É£ Librer√≠as est√°ndar
- Revisa imports obsoletos:
  - `ConfigParser` ‚Üí `configparser`
  - `Queue` ‚Üí `queue`
  - `SocketServer` ‚Üí `socketserver`
  - `urlparse`, `urllib`, `urllib2` ‚Üí `urllib.parse`, `urllib.request`
  - `cPickle` ‚Üí `pickle`
  - `UserDict` ‚Üí `collections.UserDict`
  - `UserList` ‚Üí `collections.UserList`
  - `UserString` ‚Üí `collections.UserString`
- Sustituye `__cmp__` por m√©todos ricos (`__lt__`, `__eq__`, etc.).
- `reduce()` ahora est√° en `functools.reduce()`.
- `execfile()` ‚Üí `exec(open(filename).read())`.

## 4Ô∏è‚É£ Excepciones
- Usa `except Exception as e:` en lugar de `except Exception, e:`.
- Aprovecha `raise ... from ...` para preservar trazas.
- `StandardError` ‚Üí `Exception`.
- `exec` y `eval` ahora son funciones, no declaraciones.

## 5Ô∏è‚É£ Compatibilidad y herramientas
- Antes de migrar, ejecuta `python2 -m pip install future six` si necesitas soporte mixto temporal.
- Usa `2to3` para refactor inicial autom√°tico, pero revisa manualmente despu√©s.
- Considera `modernize` o `futurize` si necesitas mantener compatibilidad con Py2 (aunque lo ideal es migrar del todo).
- A√±ade `from __future__ import print_function, unicode_literals` en los m√≥dulos que sigan en Py2 durante la transici√≥n.

## 6Ô∏è‚É£ Tipado y estilo
- A√±ade anotaciones de tipo (`def foo(x: int) -> str:`) para beneficiarte del chequeo est√°tico en 3.11.
- Usa f-strings (`f"{var}"`) en vez de `%` o `.format()`.
- Sustituye `__nonzero__` por `__bool__`.
- `raw_input()` ‚Üí `input()`.
- `file()` ‚Üí `open()`.
- Los enteros no tienen l√≠mite de tama√±o en Python 3.

## 7Ô∏è‚É£ Testing y CI
- Aseg√∫rate de que tus tests se ejecuten con `pytest` o `unittest` bajo Python 3.11.
- Configura tu pipeline para probar con la nueva versi√≥n.
- Si usas Plone/Zope, revisa que tus add-ons soporten 3.11 antes de actualizar.

## 8Ô∏è‚É£ Espec√≠fico para Plone/Zope
- `Products.CMFCore.utils.getToolByName()` sigue funcionando, pero considera usar `api.portal.get_tool()`.
- `getattr(aq_base, 'attribute', default)` para acceder a atributos sin acquisition.
- `IAnnotations(context)` para annotations sigue igual.
- `DateTime` de Zope sigue funcionando igual.
- Revisa `__import__()` y `importlib` para imports din√°micos.
- `zope.interface.implements()` ‚Üí `@implementer` decorator.

## 9Ô∏è‚É£ Buenas pr√°cticas finales
- Ejecuta `python -m compileall` para detectar sintaxis incompatible.
- Haz b√∫squedas globales en tu proyecto con patrones como:
  - `except [^a-z]*,`
  - `print [^(
]`
  - `xrange`
  - `unicode`
  - `basestring`
  - `iteritems`
  - `itervalues`
  - `iterkeys`
- Revisa dependencias externas y actual√≠zalas (`pip install --upgrade ...`).
- Si tienes C-extensions, recomp√≠lalas para 3.11.
- Usa `isinstance(obj, str)` en lugar de `isinstance(obj, basestring)`.

## üîü Casos t√≠picos olvidados

### Metaclases

**Python 2:**
```python
class Foo:
    __metaclass__ = Meta
```

**Python 3:**
```python
class Foo(metaclass=Meta):
    pass
```

### Comparaciones mixtas

Py2 permit√≠a `1 < "2"` o `None < 1`; en Py3 lanzan `TypeError`.

Revisa c√≥digo que compare tipos distintos.

### Divisi√≥n

**Py2:** `1/2 == 0`
**Py3:** `1/2 == 0.5`

Para divisi√≥n entera, usa `//`.

### Diccionarios

`d.has_key("k")` ‚Üí `"k" in d`

### Iteradores

`iterator.next()` ‚Üí `next(iterator)`

### Builtins eliminados

`apply()`, `buffer()`, `coerce()`, `intern()` ya no existen.

Busca y elimina o reescribe su l√≥gica.

### Imports relativos

Py2 aceptaba imports impl√≠citos.

En Py3 usa siempre expl√≠citos: `from . import module`

### üöÄ Flujo sugerido con Cursor
1. **Crea un branch** `migrate-py3`.
2. Abre un archivo en Cursor, activa las rules y pide: "Aplicar migraci√≥n Python 3 a este archivo".
3. Corre tus tests en Py3 despu√©s de cada grupo de cambios.
4. Cuando todo pase en 3.11, elimina c√≥digo de compatibilidad (`six`, `future`).

### üîç Comandos √∫tiles para b√∫squedas
```bash
# Buscar patrones problem√°ticos
grep -r "xrange\|unicode\|basestring\|iteritems\|itervalues\|iterkeys" src/
grep -r "except.*," src/
grep -r "print [^(]" src/
grep -r "raw_input\|file(" src/
```
